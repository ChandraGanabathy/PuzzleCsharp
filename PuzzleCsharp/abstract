

Control Template
ContentPresenter displays content just like contentcontrol, but It was designed specifically for use in control template. ContentPresenter is a primitive building block, whereas contentControl is full-blown control with its own control template. 

<Grid>
	<Grid.Resources>
                    <ControlTemplate x:Key="buttonTemplate">
                        <Grid>
                            <Ellipse Width="100" Height="100">
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="Blue"/>
                                            <GradientStop Offset="1" Color="Red"/>
                                        </LinearGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                            <Ellipse Width="80" Height="80">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="White"/>
                                        <GradientStop Offset="1" Color="Transparent"/>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
		<Viewbox>
			<ContentPresenter Margin=”{TemplateBinding Button.Content}”/>
		</Viewbox>
                        </Grid>
                    </ControlTemplate>
                </Grid.Resources>
                <Button Template="{StaticResource buttonTemplate}">OK</Button>
</Grid>
 
Triggers

<ControlTemplate.Triggers>
        <Trigger Property="Button.IsMouseOver" Value="True">
            <Setter TargetName="outerCircle" Property="Fill" Value="Orange"/>
        </Trigger>
        <Trigger Property="Button.IsPressed" Value="True">
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX=".9" ScaleY=".9"/>
                </Setter.Value>
            </Setter>
            <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
        </Trigger>
    </ControlTemplate.Triggers>
    </ControlTemplate>
    </Grid.Resources>
    <Button Template="{StaticResource buttonTemplate}">OK</Button>
    </Grid>

RelativeSource Mode
	PreviousData: Allows you to bind the previous data item (not that control that contains the
            data item) in the list of data items being displayed.
	TemplatedParent : Refers to the element to which the template (in which the data-bound element
             exists) is applied. This is similar to setting a System.Windows.TemplateBindingExtensiona
             and is only applicable if the System.Windows.Data.Binding is within a template.
	Self : Refers to the element on which you are setting the binding and allows you to bind one property of that element to another property on the same element.
	FindAncestor: Refers to the ancestor in the parent chain of the data-bound element. You can use this to bind to an ancestor of a specific type or its subclasses. This is the mode you use if you want to specify System.Windows.Data.RelativeSource.AncestorType  and/or System.Windows.Data.RelativeSource.AncestorLevel.

Binding RelativeSource={
    RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemType}
}        



void Main()
{
	var o = new SimpleMultiFundSelectionViewModel();
	o.FundSelectionExecute();
}
public class SimpleMultiFundSelectionViewModel:FundselectionDateView
{
	public override void OnFundSelectionExecute()
	{
		Console.WriteLine("I am running in Fund Selection derived class");
	}
}

public abstract class FundselectionDateView
{
	public abstract void OnFundSelectionExecute();
	
	public async System.Threading.Tasks.Task FundSelectionExecute()
	{
		await System.Threading.Tasks.Task.Run (
			() => OnFundSelectionExecute());
	}
}


 private T Clone<T>(T source)
        {
            var serializer = new DataContractSerializer(typeof(T), null, int.MaxValue, false, true, null);
            using (var ms = new System.IO.MemoryStream())
            {
                serializer.WriteObject(ms, source);
                ms.Position = 0;
                return (T)serializer.ReadObject(ms);
            }
        }
